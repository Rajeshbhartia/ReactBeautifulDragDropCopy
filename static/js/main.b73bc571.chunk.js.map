{"version":3,"sources":["Dialog.js","FtText.js","FtNumber.js","DragAndDropRBD.js","App.js","index.js"],"names":["Dialog","MDCDialog","document","querySelector","open","className","role","aria-modal","aria-labelledby","aria-describedby","id","this","props","dialogHeader","children","type","data-mdc-dialog-action","onClick","Component","FtText","componentDidMount","textInputRef","addEventListener","onEnterKeyPress","map","call","querySelectorAll","el","MDCTextField","MDCFloatingLabel","componentDidUpdate","prevProps","fieldValue","setState","componentWillUnmount","removeEventListener","event","preventDefault","keyCode","getFieldValue","state","setFieldValue","value","onChange","e","target","fieldName","fieldType","defaultValue","label","mandatory","labelClass","showLabel","ref","node","inputContainerRef","placeholder","placeHolder","required","elem","htmlFor","replace","FtNumber","numberRef","evt","which","name","COLLECTION","uuid","reorder","list","startIndex","endIndex","console","log","splice","removed","copy","source","destination","droppableSource","droppableDestination","item","index","Copyable","droppableId","isDropDisabled","provided","snapshot","innerRef","items","key","draggableId","Fragment","draggableProps","dragHandleProps","style","isDragging","Shop","ShoppingBag","App","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.b73bc571.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {MDCDialog} from '@material/dialog';\r\n\r\nclass Dialog extends Component {\r\n    componentDidMount() {\r\n        const dialog = new MDCDialog(document.querySelector('.mdc-dialog'));\r\n        dialog.open()\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"mdc-dialog\"\r\n                role=\"alertdialog\"\r\n                aria-modal=\"true\"\r\n                aria-labelledby=\"my-dialog-title\"\r\n                aria-describedby=\"my-dialog-content\">\r\n                <div className=\"mdc-dialog__container\">\r\n                    <div className=\"mdc-dialog__surface\">\r\n   \r\n                        <h2 className=\"mdc-dialog__title\" id=\"my-dialog-title\">\r\n                            {this.props.dialogHeader}\r\n                        </h2>\r\n                        <div className=\"mdc-dialog__content\" id=\"my-dialog-content\">\r\n                           {this.props.children}\r\n                        </div>\r\n                        <footer className=\"mdc-dialog__actions\">\r\n                            <button type=\"button\" className=\"mdc-button mdc-dialog__button\" data-mdc-dialog-action=\"no\" onClick={()=>{this.props.onClick(\"no\")}}>\r\n                                <span className=\"mdc-button__label\">No</span>\r\n                            </button>\r\n                            <button type=\"button\" className=\"mdc-button mdc-dialog__button\" data-mdc-dialog-action=\"yes\" onClick={()=>{this.props.onClick(\"yes\")}}>\r\n                                <span className=\"mdc-button__label\">Yes</span>\r\n                            </button>\r\n                        </footer>\r\n                    </div>\r\n                </div>\r\n                <div className=\"mdc-dialog__scrim\"></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dialog;","/**\r\n * Author: Kaisar, last modified: 14-11-2019\r\n * Modified: uttam, last modified: 24-12-2019\r\n * Description: Class component for taking text Input\r\n * Mandatory props:  No mandatory props\r\n * Optional props: onEnterKeyPress(event), onChange(fieldName, fieldValue, fieldType) as function & mandatory as boolean & label, \r\n                   defaultValue, fieldType, fieldName, fieldValue, placeHolder as string, showLabel as bool\r\n * Test file: PROJECT_ROOT/src/sgf/testings/fieldTypes/FtText.test.js\r\n */\r\n\r\nimport React, { Component } from \"react\";\r\nimport { MDCTextField } from \"@material/textfield\";\r\nimport { MDCFloatingLabel } from \"@material/floating-label\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass FtText extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      fieldValue: this.props.fieldValue || this.props.defaultValue || \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    if (this.textInputRef) {\r\n      this.textInputRef.addEventListener(\"keyup\", this.onEnterKeyPress);\r\n    }\r\n    [].map.call(document.querySelectorAll(\".mdc-text-field\"), function (el) {\r\n      return new MDCTextField(el);\r\n    });\r\n\r\n    [].map.call(document.querySelectorAll(\".mdc-floating-label\"), function (el) {\r\n      return new MDCFloatingLabel(el);\r\n    });\r\n  };\r\n\r\n  componentDidUpdate = (prevProps) => {\r\n    if (prevProps.fieldValue !== this.props.fieldValue) {\r\n      this.setState({\r\n        fieldValue: this.props.fieldValue\r\n      })\r\n    }\r\n  }\r\n  componentWillUnmount = () => {\r\n    if (this.textInputRef) {\r\n      this.textInputRef.removeEventListener(\"keyup\", this.onEnterKeyPress);\r\n    }\r\n  };\r\n\r\n  onEnterKeyPress = event => {\r\n    event.preventDefault();\r\n    if (event.keyCode === 13) {\r\n      if (this.props.onEnterKeyPress) {\r\n        this.props.onEnterKeyPress(event);\r\n      }\r\n    }\r\n  };\r\n\r\n  getFieldValue = () => {\r\n    return this.state.fieldValue;\r\n  };\r\n\r\n  setFieldValue = (value) => {\r\n    this.setState({\r\n      fieldValue: value\r\n    })\r\n  }\r\n\r\n  onChange = e => {\r\n    let fieldValue = e.target.value;\r\n    this.setState({\r\n      fieldValue: fieldValue\r\n    }, () => {\r\n      if (this.props.onChange) {\r\n        this.props.onChange(this.props.fieldName, fieldValue, this.props.fieldType);\r\n      }\r\n    });\r\n\r\n  };\r\n\r\n  render() {\r\n    let { label, mandatory } = this.props;\r\n\r\n    var labelClass = this.props.showLabel === false ? \"mdc-text-field--no-label\" : \"\"\r\n\r\n    return (\r\n      <div\r\n        className=\"fw-mb-8\"\r\n        ref={node => {\r\n          this.inputContainerRef = node;\r\n        }}\r\n      >\r\n        <div className={\"mdc-text-field fw-text-input \" + labelClass}>\r\n          <input\r\n            type=\"text\"\r\n            className=\"mdc-text-field__input fw-typography--body2\"\r\n            // name={label || \"Text\"}\r\n            value={this.state.fieldValue}\r\n            id={label || \"Text\"}\r\n            placeholder={this.props.placeHolder || \"\"}\r\n            onChange={this.onChange}\r\n            required={mandatory || false}\r\n            ref={elem => this.textInputRef = elem}\r\n          />\r\n          {this.props.showLabel !== false && (\r\n            //this div is added as the lebel didnot work in browser autofill \r\n            <div className=\"mdc-notched-outline__notch\">\r\n              <label\r\n                htmlFor={label || \"Text\"}\r\n                className=\"fw-typography--body2 mdc-floating-label fw-text-label\"\r\n              >\r\n                {label ? label.replace(/_/gi, \" \") : \"Text\"}\r\n              </label>\r\n            </div>\r\n          )}\r\n          <div className=\"mdc-line-ripple\" />\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nFtText.propTypes = {\r\n  onEnterKeyPress: PropTypes.func,\r\n  onChange: PropTypes.func,\r\n  mandatory: PropTypes.bool,\r\n  label: PropTypes.string,\r\n  defaultValue: PropTypes.string,\r\n  fieldType: PropTypes.string,\r\n  fieldName: PropTypes.string,\r\n  fieldValue: PropTypes.string,\r\n  placeHolder: PropTypes.string,\r\n  showLabel: PropTypes.bool\r\n};\r\n\r\nexport default FtText;\r\n","/**\r\n * Author: uttam, last modified: 07-11-2019\r\n * Modified: Kaisar, last modified: 14-11-2019\r\n * Modified: uttam, last modified: 12-12-2019 \r\n * Description: Class component for taking Number Input\r\n * Mandatory props: No mandatory props\r\n * Optional props: onEnterKeyPress(event), onChange(fieldName, fieldValue, fieldType) as function,\r\n                   mandatory as bool & fieldValue, fieldName, fieldType, label, placeHolder,\r\n                   defaultValue as string, showLabel as boolean\r\n * Test file: PROJECT_ROOT/src/sgf/testings/fieldTypes/FtNumber.test.js\r\n */\r\n\r\nimport React, { Component } from \"react\";\r\nimport { MDCTextField } from \"@material/textfield\";\r\nimport { MDCFloatingLabel } from \"@material/floating-label\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass FtNumber extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { fieldValue, defaultValue } = this.props;\r\n    this.state = {\r\n      fieldValue: fieldValue || defaultValue || \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    if (this.numberRef) {\r\n      this.numberRef.addEventListener(\"keypress\", function (evt) {\r\n        if ((evt.which !== 8 && evt.which !== 0 && evt.which < 48) || evt.which > 57) {\r\n          evt.preventDefault();\r\n        }\r\n      });\r\n      this.numberRef.addEventListener(\"keyup\", this.onEnterKeyPress);\r\n    }\r\n\r\n    [].map.call(document.querySelectorAll(\".mdc-text-field\"), function (el) {\r\n      return new MDCTextField(el);\r\n    });\r\n\r\n    [].map.call(document.querySelectorAll(\".mdc-floating-label\"), function (el) {\r\n      return new MDCFloatingLabel(el);\r\n    });\r\n  };\r\n\r\n  componentWillUnmount = () => {\r\n    if (this.numberRef) {\r\n      this.numberRef.removeEventListener(\"keyup\", this.onEnterKeyPress);\r\n    }\r\n  };\r\n\r\n  onEnterKeyPress = event => {\r\n    event.preventDefault();\r\n    if (event.keyCode === 13) {\r\n      if (this.props.onEnterKeyPress) {\r\n        this.props.onEnterKeyPress(event);\r\n      }\r\n    }\r\n  };\r\n\r\n  getFieldValue = () => {\r\n    return this.state.fieldValue;\r\n  };\r\n\r\n  onChange = e => {\r\n    let fieldValue = e.target.value;\r\n    this.setState({\r\n      fieldValue: fieldValue\r\n    }, () => {\r\n      if (this.props.onChange) {\r\n        this.props.onChange(this.props.fieldName, fieldValue, this.props.fieldType);\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let { label, mandatory } = this.props;\r\n    var labelClass = this.props.showLabel === false ? \"mdc-text-field--no-label\" : \"\"\r\n\r\n    return (\r\n      <div\r\n        className=\"fw-mb-8\"\r\n        ref={node => {\r\n          this.inputContainerRef = node;\r\n        }}\r\n      >\r\n        <div className={\"mdc-text-field fw-text-input \" + labelClass}>\r\n          <input\r\n            type=\"number\"\r\n            className=\"mdc-text-field__input fw-typography--body2\"\r\n            onChange={this.onChange}\r\n            value={this.state.fieldValue}\r\n            name={label ? label : \"number\"}\r\n            required={mandatory}\r\n            id={label ? label : \"number\"}\r\n            ref={node => this.numberRef = node}\r\n            placeholder={this.props.placeHolder || \"\"}\r\n          />\r\n          {this.props.showLabel !== false && (\r\n            <label\r\n              htmlFor={label ? label : \"number\"}\r\n              className=\"mdc-floating-label fw-typography--body2 fw-text-label\"\r\n            >\r\n              {label ? label.replace(/_/gi, \" \") : \"Number\"}\r\n            </label>\r\n          )}\r\n          <div className=\"mdc-line-ripple\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nFtNumber.propTypes = {\r\n  onEnterKeyPress: PropTypes.func,\r\n  onChange: PropTypes.func,\r\n  mandatory: PropTypes.bool,\r\n  label: PropTypes.string,\r\n  placeHolder: PropTypes.string,\r\n  fieldName: PropTypes.string,\r\n  fieldType: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number\r\n  ]),\r\n  fieldValue: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number\r\n  ]),\r\n  defaultValue: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number\r\n  ]),\r\n  showLabel: PropTypes.bool\r\n};\r\n\r\nexport default FtNumber;\r\n","// import React from \"react\";\r\nimport React, { Component } from 'react';\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport \"./App.scss\";\r\nimport Dialog from './Dialog';\r\nimport FtText from './FtText';\r\nimport FtNumber from './FtNumber';\r\n\r\nconst COLLECTION = [\r\n    { id: uuid(), label: \"Text\" },\r\n    { id: uuid(), label: \"Email\" },\r\n    { id: uuid(), label: \"Number\" }\r\n];\r\n\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    console.log(list, startIndex, endIndex)\r\n    const [removed] = list.splice(startIndex, 1);\r\n    list.splice(endIndex, 0, removed);\r\n    return list;\r\n};\r\n\r\nconst copy = (source, destination, droppableSource, droppableDestination) => {\r\n    const item = source[droppableSource.index];\r\n    destination.splice(droppableDestination.index, 0, { ...item, id: uuid() });\r\n    return destination;\r\n};\r\n\r\nfunction Copyable(props) {\r\n    return (\r\n        <Droppable droppableId={props.droppableId} isDropDisabled={true} className=\"\">\r\n            {(provided, snapshot) => (\r\n                <div ref={provided.innerRef} className={props.className}>\r\n                    {props.items.map((item, index) => (\r\n                        <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                            {(provided, snapshot) => (\r\n                                <React.Fragment>\r\n                                    <div\r\n                                        ref={provided.innerRef}\r\n                                        {...provided.draggableProps}\r\n                                        {...provided.dragHandleProps}\r\n                                        style={provided.draggableProps.style}\r\n                                        className={snapshot.isDragging ? \"fw-single-box  dragging\" : \"fw-single-box \"}\r\n                                    >\r\n                                        {item.label}\r\n                                    </div>\r\n                                    {snapshot.isDragging && (\r\n                                        <div className=\"fw-single-box react-beatiful-dnd-copy fw-dragging\">{item.label}</div>\r\n                                    )}\r\n                                </React.Fragment>\r\n                            )}\r\n                        </Draggable>\r\n\r\n                    ))}\r\n                    {provided.placeholder}\r\n                </div>\r\n            )}\r\n        </Droppable>\r\n    );\r\n}\r\n\r\nfunction Shop(props) {\r\n    return <Copyable droppableId=\"SHOP\" className=\"fw-single-box-wrapper\" items={props.items} />;\r\n}\r\n\r\n\r\nfunction ShoppingBag(props) {\r\n    console.log(props)\r\n    return (\r\n        <Droppable droppableId={props.id}>\r\n            {(provided, snapshot) => {\r\n                console.log(snapshot)\r\n                return (\r\n                    <div ref={provided.innerRef} className=\"shopping-bag fw-box2-content-wrapper\">\r\n                        {props.items.map((item, index) => (\r\n                            <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                                {(provided, snapshot) => (\r\n                                    <div\r\n                                        ref={provided.innerRef}\r\n                                        {...provided.draggableProps}\r\n                                        {...provided.dragHandleProps}\r\n                                        style={provided.draggableProps.style}\r\n                                        className=\"fw-box2-single-content\"\r\n                                    >\r\n                                        <div className=\"fw-box2-icon-wrapper\">\r\n                                            <i className=\"material-icons\">\r\n                                                settings_applications\r\n                                            </i>\r\n                                            <i className=\"material-icons\">\r\n                                                visibility\r\n                                            </i>\r\n                                            <i className=\"material-icons\">\r\n                                                delete\r\n                                            </i>\r\n                                        </div>\r\n                                        <div className=\"fw-box2-single-content-header\">\r\n                                            {/* <FtText label={item.label} /> */}\r\n                                            {item.label}\r\n                                        </div>\r\n                                        <div className=\"fw-box2-single-content-subheader\">\r\n                                            Hello 123\r\n                                        </div>\r\n                                        <div className=\"fw-box2-line\" />\r\n                                    </div>\r\n                                )}\r\n                            </Draggable>\r\n                        ))}\r\n                        {provided.placeholder}\r\n                    </div>\r\n                )\r\n            }\r\n            }\r\n        </Droppable>\r\n    );\r\n}\r\n\r\n\r\nclass DragAndDropRBD extends Component {\r\n\r\n    state = {\r\n        shoppingBagItems1: [],\r\n        isDialogOpen: false,\r\n        result: {}\r\n    }\r\n\r\n    onDragEnd = (result) => {\r\n        const { source, destination } = result;\r\n        console.log(source, destination, result)\r\n\r\n        let dest = { ...destination }\r\n        dest.index = this.state.shoppingBagItems1.length\r\n\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        switch (source.droppableId) {\r\n            case \"BAG1\":\r\n                reorder(this.state.shoppingBagItems1, source.index, destination.index)\r\n                break;\r\n            case \"SHOP\":\r\n                this.setState({ isDialogOpen: true, result })\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleClick = (name) => {\r\n        if (name === \"yes\") {\r\n            copy(COLLECTION, this.state.shoppingBagItems1, this.state.result.source, this.state.result.destination)\r\n        }\r\n        this.setState({ isDialogOpen: false })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"fw-json-form-wrapper\">\r\n\r\n                <DragDropContext onDragEnd={this.onDragEnd}>\r\n                    <div className=\"fw-json-form-title\">\r\n                        Form1\r\n                    </div>\r\n                    <div className=\"fw-json-form-divider\" />\r\n                    <div className=\"fw-json-form-subtitle\">\r\n                        CRM > Forms\r\n                    </div>\r\n                    <div className=\"fw-box1\">\r\n                        <div className=\"fw-box1-title\">\r\n                            Field Types\r\n                        </div>\r\n                        <Shop items={COLLECTION} />\r\n                    </div>\r\n\r\n                    <div className=\"fw-box2 mdc-elevation--z6\" >\r\n                        <div className=\"fw-box2-title-wrapper\">\r\n                            <span className=\"fw-box2-title\">\r\n                                Selected Fields\r\n                            </span>\r\n                            <span className=\"fw-box2-preview\" onClick={() => { console.log(\"preview\") }}>\r\n                                Preview\r\n                            </span>\r\n                        </div>\r\n\r\n                        <div style={{ display: 'flex', height: \"600px\", width: \"700px\", overflow: 'auto', }}>\r\n                            <ShoppingBag items={this.state.shoppingBagItems1} id=\"BAG1\" />\r\n                        </div>\r\n                    </div>\r\n                </DragDropContext>\r\n                {this.state.isDialogOpen && (<Dialog onClick={this.handleClick} dialogHeader=\"Add Text Field\">\r\n                    <FtText label=\"Label name\" defaultValue=\"Text\" />\r\n                    <FtText label=\"Default Value\" />\r\n                    <FtText label=\"Helper Text\" />\r\n                    <FtNumber label=\"Maximum Character\" defaultValue={255} />\r\n                </Dialog>)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DragAndDropRBD;","import React, { Component } from 'react';\r\nimport DragAndDropRBD from './DragAndDropRBD';\r\n\r\nclass App extends Component {\r\n  // componentDidMount() {\r\n  //   let location = window.location.href\r\n  //   console.log(location)\r\n\r\n  //   document.addEventListener('DOMContentLoaded', function() {\r\n  //     // window.location.replace(\"http://www.google.com\");\r\n  //     // window.location.replace(\"http://localhost:3000/#\");\r\n  //  }, false);\r\n  // }\r\n\r\n  // componentDidMount() {\r\n  //   var xhttp = new XMLHttpRequest();\r\n  //   xhttp.onreadystatechange = function() {\r\n  //     if (this.readyState == 4 && this.status == 200) {\r\n  //       document.getElementById(\"demo\").innerHTML =\r\n  //       this.responseText;\r\n  //     }\r\n  //   };\r\n  //   xhttp.open(\"GET\", \"https://myaccount-dev.synopi.com:13443/signin\", true);\r\n  //   xhttp.send();\r\n  // }\r\n  \r\n  \r\n  render() {\r\n    return (\r\n      <div id=\"demo\">\r\n        {/* <DragAndDropRBD /> */}\r\n        hello\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n"],"sourceRoot":""}